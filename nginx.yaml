AWSTemplateFormatVersion: '2010-09-09'
Description: An example CloudFormation template for Fargate.
#Parameters:
  #VpcId:
    #Type: AWS::EC2::VPC::Id
    #Description: Launch ECS cluster in this VPC
  #Subnet1:
    #Type: AWS::EC2::Subnet::Id
  #Subnet2:
    #Type: AWS::EC2::Subnet::Id
  #VPCGatewayAttachment:
    #Type: AWS::EC2::VPCGatewayAttachment::Id
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '172.31.16.0/20'
      MapPublicIpOnLaunch: true

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '172.31.32.0/20'
      MapPublicIpOnLaunch: true
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'fargate-cluster'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-services
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
        
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [FargateService, ContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: tcp
         FromPort: '80'
         ToPort: '80'
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'apis'
      RetentionInDays: 1
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  #DefaultTargetGroup:
    #Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #Properties:
      #Name: default
      #VpcId: !Ref VPC
      #Protocol: 'HTTP'
      #Port: '80' 
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      # will look for a 200 status code by default unless specified otherwise
      #HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 4
      Name: !Join ['', [FargateService, TargetGroup]]
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      VpcId: !Ref VPC
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: ['*']
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'apis'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '512'
      Memory: 1GB
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      #TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: 'FargateService'
          Image: 310643530327.dkr.ecr.us-west-2.amazonaws.com/nginx:latest
          #Cpu: 256
          #Memory: 512
          PortMappings:
            - ContainerPort: 80
              #HostPort: 8080
              #Protocol: tcp
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: 'apis'
              awslogs-stream-prefix: ecs 
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn: ListenerRule
    Properties: 
      ServiceName: 'FargateService'
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: 'FARGATE'
      DeploymentConfiguration:
        MinimumHealthyPercent: 70
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: 'FargateService'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup              
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  Subnet1:
    Description: 'Subnet 1 on AZ1'
    Value: !Ref Subnet1
  Subnet2:
    Description: 'Subnet 2 on AZ2'
    Value: !Ref Subnet2
  ECSTaskExecutionRole:
    Description: ECS Task Execution Role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
  Cluster:
    Value: !Ref Cluster
  ContainerSecurityGroup:
    Description: container security group
    Value: !Ref ContainerSecurityGroup
  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
  LOADBALANCERURL:
    Description: URL of the LoadBalancer
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - LoadBalancer
          - DNSName

